knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) #for data manipulation and wrangling
library(visdat) # for graphing na values and similar tasks relating to na values
library(mice) # this library has tools to impute missing data
library(VIM)
library(GGally) #for graphing and calculations.
library(ltm) # Used for finding correlation between dichotomous categorical variable and continuous variable using function (biserial.cor())
library(caret) # for testing and predictions
library(mltools) #provides machine learning tools
library(ggthemes) #for customized themes for ggplots
library(naniar)# for na values and visualization
loan <- read_csv("~/Desktop/LoanDefault_Shiny/Loan_Default.csv")
loan <- data.frame(loan, stringsAsFactors = F)
loan %>%
mutate_if(is.character, as.factor)->loan
loan$Status <- sapply(loan$Status, as.factor)
loan$Status <- sapply(loan$Status, as.factor)
loan$term <- sapply(loan$term, as.factor)
loan <- subset(loan,select = -c(ID,year))
loan$Credit_Score<- cut(loan$Credit_Score, breaks=c(0, 579, 669, 739, 799,Inf), labels =
c('VPoor(579)',
'Poor(580-669)',
'Fair(670-739)',
'Good(740-799)',
'Excellent(800)'))
shiny::runApp()
runApp()
str(loan)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
str(loan)
install.packages("ISLR")
library(ISLR)
data("Default")
Default
?createDataPartition()
train_test <- createDataPartition(loan$Status, p = 0.70, list = F)
head(train_test)
tain <- loan[train_test,]
test <- loan[-train_test,]
head(train)
logistic_model <- train(
form = Status ~ .,
data = train,
trControl = trainControl(method = "cv", number = 5), #conducting 5-fold cross validation
method = "glm",#general linear models --> Logistic Regression
family = "binomial" # Logistic Regression
)
class(train)
logistic_model <- train(
form = Status ~ .,
data = train,
trControl = trainControl(method = "cv", number = 5), #conducting 5-fold cross validation
method = "glm",#general linear models --> Logistic Regression
family = "binomial" # Logistic Regression
)
nrow(train)
tain <- loan[train_test,] #70% of data (104,000 observations x 32 variables)
train <- loan[train_test,] #70% of data (104,000 observations x 32 variables)
View(tain)
test <- loan[-train_test,]#30% of data (44,600 observations x 32 variables)
nrow(train)
nrow(test)
logistic_model <- train(
form = Status ~ .,
data = train,
trControl = trainControl(method = "cv", number = 5), #conducting 5-fold cross validation
method = "glm",#general linear models --> Logistic Regression
family = "binomial" # Logistic Regression
)
logistic_model <- train(
form = Status ~ .,
data = train,
trControl = trainControl(method = "cv", number = 5), #conducting 5-fold cross validation
method = "glm",#general linear models --> Logistic Regression
family = "binomial" # Logistic Regression
)
logistic_model <- train(
form = Status ~ .,
na.action(na.exclude),
data = train,
trControl = trainControl(method = "cv", number = 5), #conducting 5-fold cross validation
method = "glm",#general linear models --> Logistic Regression
family = "binomial" # Logistic Regression
)
loan_class <- drop_na(loan)
str(loan_class)
train_test <- createDataPartition(loan_class$Status, p = 0.70, list = F)
train <- loan[train_test,] #70% of data (104,000 observations x 32 variables)
test <- loan[-train_test,]#30% of data (44,600 observations x 32 variables)
nrow(train)
nrow(test)
logistic_model <- train(
form = Status ~ .,
na.action(na.exclude),
data = train,
trControl = trainControl(method = "cv", number = 5), #conducting 5-fold cross validation
method = "glm",#general linear models --> Logistic Regression
family = "binomial" # Logistic Regression
)
logistic_model <- train(
form = Status ~ .,
data = train,
trControl = trainControl(method = "cv", number = 5), #conducting 5-fold cross validation
method = "glm",#general linear models --> Logistic Regression
family = "binomial" # Logistic Regression
)
logistic_model <- train(
form = Status ~ .,
data = train,
trControl = trainControl(method = "cv", number = 5),
method = "glm",
family = "binomial"
)
is.na(train)
sum(is.na(train))
is.na(train)
loan_class <- drop.na(loan) #98187 obs. of  32 variables:
loan_class <- drop_na(loan) #98187 obs. of  32 variables:
str(loan_class)
summary(loan_class)
train_test <- createDataPartition(loan_class$Status, p = 0.70, list = F)
train <- loan[train_test,] #70% of data (104,000 observations x 32 variables)
test <- loan[-train_test,]#30% of data (44,600 observations x 32 variables)
is.na(train)
logistic_model <- train(
form = Status ~ .,
data = train,
trControl = trainControl(method = "cv", number = 5),
method = "glm",
family = "binomial"
)
logistic_model <- train(
form = Status ~ .,
data = train,
trControl = trainControl(method = "cv", number = 5),
method = "glm",
family = "binomial",
na.action=na.exclude
)
loan_class <- subset(loan_class,select = -c('rate_of_interest',
'Interest_rate_spread',
'Upfront_charges',
'income',
'property_value',
'LTV',
'dtir1'
))
loan_class <- subset(loan_class,select = -c('rate_of_interest',
'Interest_rate_spread',
'Upfront_charges',
'income',
'property_value',
'LTV',
'dtir1'
))
loan_class <- subset(loan_class,select = -c("rate_of_interest",
"Interest_rate_spread",
"Upfront_charges",
"income",
"property_value",
"LTV",
"dtir1"
))
loan_class <- subset(loan_class,select = -c(rate_of_interest,
Interest_rate_spread,
Upfront_charges,
income,
property_value,
LTV,
dtir1
))
summary(loan_class)
train_test <- createDataPartition(loan_class$Status, p = 0.70, list = F)
train <- loan[train_test,] #70% of data (104,000 observations x 32 variables)
loan_class <- drop_na(loan) #98187 obs. of  32 variables:
train_test <- createDataPartition(loan_class$Status, p = 0.70, list = F)
train <- loan_class[train_test,] #70% of data (104,000 observations x 32 variables)
test <- loan_class[-train_test,]#30% of data (44,600 observations x 32 variables)
nrow(train)
nrow(test)
is.na(train)
logistic_model <- train(
form = Status ~ .,
data = train,
trControl = trainControl(method = "cv", number = 5),
method = "glm",
family = "binomial"
)
str(train)
summary(train)
summary(loan_class)
loan_class <- (loan) #98187 obs. of  32 variables:
loan_class <- subset(loan_class,select = -c(rate_of_interest,
Interest_rate_spread,
Upfront_charges,
income,
property_value,
LTV,
dtir1
))
summary(loan_class)
train_test <- createDataPartition(loan_class$Status, p = 0.70, list = F)
train <- loan_class[train_test,] #70% of data (104,000 observations x 32 variables)
test <- loan_class[-train_test,]#30% of data (44,600 observations x 32 variables)
nrow(train)
logistic_model <- train(
form = Status ~ .,
data = train,
trControl = trainControl(method = "cv", number = 5),
method = "glm",
family = "binomial"
)
logistic_model <- train(
form = Status ~ .,
data = train,
trControl = trainControl(method = "cv", number = 5),
method = "glm",
family = "binomial",
na.omit()
)
logistic_model <- train(
form = Status ~ .,
data = train,
trControl = trainControl(method = "cv", number = 5),
method = "glm",
family = "binomial"
)
logistic_model <- train(
form = Status ~ .,
data = train,
trControl = trainControl(method = "cv", number = 5),
method = "glm",
family = "binomial",
na.action=na.exclude
)
logistic_model
logistic_model$finalModel
logistic_model$results
head(predict(logistic_model, newdata = test))
calc_acc = function(actual, predicted) {
mean(actual == predicted)
}
calc_acc(actual = default_tst$default,
predicted = predict(default_glm_mod, newdata = default_tst))
calc_acc(actual = test$default,
predicted = predict(logistic_model, newdata = default_tst))
calc_acc(actual = test$default,
predicted = predict(logistic_model, newdata = test))
head(predict(logistic_model, newdata = test, type = "prob"))
pred <- predict(logistic_model, newdata = test)
pred
confusionMatrix(pred)
confusionMatrix(pred,loan$status)
confusionMatrix(pred,loan$Status)
confusionMatrix(loan_class$Status, pred)
confusionMatrix(data = pred)
confusionMatrix(data = pred,reference = test)
predictions <- cbind(data.frame(train_preds=pred,
loan_class$Status))
predictions <- cbind(data.frame(train_preds=pred,
test$Status))
pred
logistic_model$pred
logistic_model$preProcess
test$Status
str(test$Status)
summary(test$Status)
head(pred)
pred2
pred2 <- ifelse(pred>0.5,1,0)
pred2
tab2 <- table(Predicted = pred2,Actual = test$Status)
pred <- predict(logistic_model,test, type = 'response')
pred <- predict(logistic_model,test, type = 'raw')
pred2 <- ifelse(pred>0.5,1,0)
tab2 <- table(Predicted = pred2,Actual = test$Status)
nrow(test)
nrow(pred)
pred
nrow(pred)
nrow(pred2)
nrow(pred2)
ncol(pred2)
logistic_model <- train(
data = train,
form = Status ~ .,
trControl = trainControl(method = "cv", number = 5),#Summary of sample sizes: 80618, 80618, 80618, 80619, 80619
method = "glm",
family = "binomial",
na.action=na.exclude
)
logistic_model <- train(
form = Status ~ .,
data = train,
trControl = trainControl(method = "cv", number = 5),#Summary of sample sizes: 80618, 80618, 80618, 80619, 80619
method = "glm",
family = "binomial",
na.action=na.exclude
)
logistic_model
logistic_model$finalModel
logistic_model$results
logistic_model$results
logistic_model$levels
varimp_mars <- varImp(logistic_model)
plot(varimp_mars, main="Variable Importance with MARS")
plot(head(varimp_mars,10), main="Variable Importance with MARS")
varimp_mars <- varImp(logistic_model)
plot(head(varimp_mars,10), main="Variable Importance with MARS")
plot(head(varimp_mars), main="Variable Importance with MARS")
varimp_mars <- varImp(logistic_model)
plot(varimp_mars, main="Variable Importance with MARS")
plot(logistic_model, main="Model Accuracies with MARS")
plot(logistic_model, main="Model Accuracies with MARS")
confusionMatrix(test$Status,pred)
confusionMatrix(test,pred)
test
pred
test$Status
pred
confusionMatrix(test,pred)
test$Status
pred
confusionMatrix(test$Status,pred)
length(test$Status)
length(pred)
length(test$Status)
length(pred)
logistic_model
test
variable_imp <- varImp(logistic_model)
plot(variable_imp, main="Variable Importance with MARS")
dev.new(width=5, height=4)
plot(variable_imp, main="Variable Importance")
dev.new(width=5, height=10)
plot(variable_imp, main="Variable Importance")
dev.new(width=5, height=20)
plot(variable_imp, main="Variable Importance")
variable_imp <- varImp(logistic_model,scale = T)
plot(variable_imp, main="Variable Importance")
variable_imp <- varImp(logistic_model,scale = F)
plot(variable_imp, main="Variable Importance")
plot(variable_imp, main="Variable Importance", top = 20)
filterVarImp(x = train[, -ncol(training)], y = train$Status)
filterVarImp(x = train[, -ncol(train)], y = train$Status)
runApp()
runApp()
runApp()
plot(logistic_model, main="Model Accuracies with MARS")
filterVarImp(x = train[, -ncol(train)], y = train$Status)
head(roc_imp)#The area under the ROC curve is computed for each class.
head(roc)#The area under the ROC curve is computed for each class.
roc <- filterVarImp(x = train[, -ncol(train)], y = train$Status)
head(roc)#The area under the ROC curve is computed for each class.
head(roc,20)#The area under the ROC curve is computed for each class.
data.frame(head(roc,20))#The area under the ROC curve is computed for each class.
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
roc <- filterVarImp(x = train[, -ncol(train)], y = train$Status)
df <- table(head(roc,10))
df
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
